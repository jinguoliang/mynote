Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-12-24T16:19:05+08:00

====== some phrase ======
Created Tuesday 24 December 2013

[[+一些有趣的词|一些有趣的词]]

=== cold boot ===
      
	The start-up of a computer from a powered-down, or off, state.
	Also called a hard boot.
	Contrast with warm boot, restarting a computer via the operating system.


==== asec ====
 
	ASEC files are used by Froyo, the version 2.2 release of the Android mobile operating system. They store mobile application data using proprietary encryption which can be run with the Android SDK emulator. The secure ASEC format allows applications to exist on mobile devices without being modified or corrupted by other programs.


=== BluePrint ===
	A blueprint is a reproduction of a technical drawing, documenting an architecture or an engineering design, using a contact print process on light-sensitive sheets. Introduced in the 19th century, the process allowed rapid and accurate reproduction of documents used in construction and industry. The blue-print process was characterized by light colored lines on a blue background, a negative of the original. The process was unable to reproduce color or shades of grey.
	Various base materials have been used for blueprints. Paper was a common choice; for more durable prints linen was sometimes used, but with time, the linen prints would shrink slightly. To combat this problem, printing on imitation vellum and, later, polyester film (Mylar) was implemented.
	The process has been largely displaced by the diazo whiteprint process and by large-format xerographic photocopiers, so reproduced drawings are usually called "prints" or just "drawings".
	{{./pasted_image.bmp}}{{./pasted_image001.bmp}}{{./pasted_image002.bmp}}


==== qualcomm ====
即高通。
高通（Qualcomm）是一家美国的无线电通信技术研发公司，成立于1985年7月，在以技术创新推动无线通讯向前发展方面扮演着重要的角色，以在CDMA技术方面处于领先地位而闻名，而CDMA技术已成为世界上发展最快的无线技术。

==== tty ====
这个词源于Teletypes，最早是源于电传打印机。


=== Django ===
 
Django是一个开放源代码的Web应用框架，由Python写成。采用了MVC的软件设计模式，即模型M，视图V和控制器C。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。

=== What Is mod_wsgi? ===
The aim of mod_wsgi is to implement a simple to use Apache module which can host any Python application which supports the Python WSGI interface. The module would be suitable for use in hosting high performance production web sites, as well as your average self managed personal sites running on web hosting services.

=== Redis ===
Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持

=== PostgreSQL ===
 是一个自由的对象-关系数据库服务器(数据库管理系统)，它在灵活的 BSD-风格许可证下发行。它提供了相对其他开放源代码数据库系统(比如 MySQL 和 Firebird)，和专有系统(比如 Oracle、Sybase、IBM 的 DB2 和 Microsoft SQL Server)之外的另一种选择。

=== Gearman ===
是一个用来把工作委派给其他机器、分布式的调用更适合做某项工作的机器、并发的做某项工作在多个调用间做负载均衡、或用来在调用其它语言的函数的系统。

=== Memcached ===
 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。

=== Nginx ===
（发音同 engine x）是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：新浪、网易、 腾讯等。

=== Jenkins ===
之前叫做Hudson，是基于Java开发的一种持续集成工具，用于监控秩序重复的工作

=== ISO ===
ISO is the measurement of how sensitive a digital camera's sensor is to light. The speed or light-sensitivity of a digital camera's sensor is rated in ISO numbers -- the lower the number, the slower the response to light.
Higher ISO numbers indicate a higher sensitivity to light, so less time is needed to expose a picture. Most digital cameras let you control the ISO setting to allow the use of higher shutter speeds and/or smaller apertures, according to circumstances.
Many digital cameras offer high ISO settings (e.g. 1600, 2000, 3200, even up to 6400!) While this allows photos to be taken in low light, you will generally find that the higher the ISO setting, the noisier your image will -- depending on how much noise there is, it might look like your photo is covered in a layer of sand (that would mean a lot of noise).
Unless you really need to use an ISO of 1600 or more to capture your subject, I'd stick to the lower end of the spectrum -- hesitant to go higher than ISO 800.
General Rules and tips for ISO Camera Settings:
•Use an ISO of 100 or 200 when taking photographs outside in sunny conditions.
•If the sky is overcast or it is evening time, then use an ISO within the range of 400 to 800.
•Night time or in cases of low light you might need to set your digital camera ISO to 1600. If you don't then your photo will appear too dark if at all.
How does the ISO speed affect the photographs end result?
If you set your digital camera to a low ISO, for example 100, the resulting photograph will be better quality than one set at 1600. The higher the ISO the more grainy the photo will look. Therefore go for a low ISO number whenever possible.
However there are circumstances where a lower quality photograph is better than none at all. For example taking photographs of fish in a dark aquarium would normally be out of range for most point and shoot cameras. As you can see by the image below, setting my DSLR camera to a high 1600 ISO made this task possible. Otherwise there would not have been enough light let in to the sensor and the image would have turned out totally black.
 
Of course I could have chosen a lower ISO camera setting and used the inbuilt flash. However this would have resulted in unwanted flash glare bouncing off the glass. With this in mind a higher ISO (say 800) is also recommended if you want to take photographs of people inside in the evening without using a flash.

=== SOAP ===
简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，是交换数据的一种协议规范，是一种轻量的、简单的、基于XML（标准通用标记语言下的一个子集）的协议，
它被设计成在WEB上交换结构化的和固化的信息。 SOAP 可以和现存的许多因特网协议和格式结合使用，包括超文本传输协议（ HTTP），简单邮件传输协议（SMTP），多用途网际邮件扩充协议（MIME）。
它还支持从消息系统到远程过程调用（RPC）等大量的应用程序。

=== REST ===
表征状态转移。是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记
语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。

__原则__
大部分对REST的介绍是以其正式的定义和背景作为开场的。这里提出一个简要的定义：REST定义了Web的使用标准（这和大多数人的实际使用方式有很大不同），例如HTTP和URI。如果你在设计应用程序时
能坚持REST原则，那就预示着你将会得到一个使用了优质Web架构（这将让你受益）的系统。[2] 
REST 并非始终是正确的选择。 它作为一种设计 Web 服务的方法而变得流行，这种方法对专有中间件（例如某个应用程序服务器）的依赖比基于 SOAP 和 WSDL 的方法更少。 在某种意义上，通过强调URI和
HTTP等早期 Internet 标准，REST 是对大型应用程序服务器时代之前的 Web 方式的回归。 正如您已经在所谓的基于 REST 的接口设计原则中研究过的一样，XML over HTTP 是一个功能强大的接口，允许内部
应用程序（例如基于 Asynchronous JavaScript + XML (Ajax) 的自定义用户界面）轻松连接、定位和使用资源。 事实上，Ajax 与 REST 之间的完美配合已增加了当今人们对 REST 的注意力。
通过基于 REST 的 API 公开系统资源是一种灵活的方法，可以为不同种类的应用程序提供以标准方式格式化的数据。 它可以帮助满足集成需求（这对于构建可在其中容易地组合 (Mashup) 数据的系统非常关键）
，并帮助将基于 REST 的基本服务集扩展或构建为更大的集合。

=== gradle ===
Gradle 是以 Groovy 语言为基础，面向Java应用为主。基于DSL（领域特定语言）语法的自动化构建工具
Ø gradle对多工程的构建支持很出色，工程依赖是gradle的第一公民。
Ø gradle支持局部构建。
Ø 支持多方式依赖管理：包括从maven远程仓库、nexus私服、ivy仓库以及本地文件系统的jars或者dirs
Ø gradle是第一个构建集成工具（the first build integration tool），与ant、maven、ivy有良好的相容相关性。
Ø 轻松迁移：gradle适用于任何结构的工程（Gradle can adapt to any structure you have.）。你可以在同一个开发平台平行构建原工程和gradle工程。通常要求写相关测试，以保证开发的插件的相似性，这种迁移可以减少破坏性，尽可能的可靠。这也是重构的最佳实践。
Ø gradle的整体设计是以作为一种语言为导向的，而非成为一个严格死板的框架。
Ø 免费开源

=== Maven ===
Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。
发文时，绝大多数开发人员都把 Ant 当作 Java 编程项目的标准构建工具。遗憾的是，Ant 的项目管理工具（作为 make的替代工具）不能满足绝大多数开发人员的需要。通过检查 Ant 构建文件，很难发现项目的相关性信息和其它信息（如开发人员/拥有者、版本或站点主页）。
Maven 除了以程序构建能力为特色之外，还提供 Ant 所缺少的高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目，而使用 Ant 则需要十几行。事实上，由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。
Maven这个单词来自于意第绪语，意为知识的积累，最早在Jakata Turbine项目中它开始被用来试图简化构建过程。当时有很多项目，它们的Ant build文件仅有细微的差别，而JAR文件都由CVS来维护。于是Maven创始者开始了Maven这个项目，该项目的清晰定义包括，一种很方便的发布项目信息的方式，以及一种在多个项目中共享JAR的方式。

=== ProGuard ===
ProGuard是一个压缩、优化和混淆Java字节码文件的免费的工具，它可以删除无用的类、字段、方法和属性。可以删除没用的注释，最大限度地优化字节码文件。它还可以使用简短的无意义的名称来重命名已经存在的类、字段、方法和属性。

==== 次元 ====
“次元空间”也可称为“多维空间”，“次元”就是“维度”。据说，宇宙是由很多很多的次元组成，所谓“次元”所指就是如一本书的书页，而这页是什么样的，只有写这书的人才知道。
关于“次元”的诠释有很多种；多个平行的空间的其中一个位面、同一时间的不同分秒等，其中以前一个所被认同着居多。但它究竟是什么样的，没有人真正知道，还有待发现！而不同的位面是否存在，就如到底有没有外星人一样不得而知。
空间中均匀分布着物质，而物质始终是运动的，物质的运动表现为振动，则空间是振动的，空间振动的频率范围远超人类所知的频率范围，则不同次元空间可以理解为振动频率不同的空间，由于空间振动频率不同其性质也有所差异，单一差异即称为维度。

=== blob ===
BLOB (binary large object)，二进制大对象，是一个可以存储二进制文件的容器。
在计算机中，BLOB常常是数据库中用来存储二进制文件的字段类型。
BLOB是一个大文件，典型的BLOB是一张图片或一个声音文件，由于它们的尺寸，必须使用特殊的方式来处理（例如：上传、下载或者存放到一个数据库）。
根据Eric Raymond的说法，处理BLOB的主要思想就是让文件处理器（如数据库管理器）不去理会文件是什么，而是关心如何去处理它。

=== Duck typing ===
的准则是 “If you can do it, you can be used here”。Wikipeida 上的一个非常形象的解释是:
When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.
一般来讲，使用 duck typing 的编程语言往往被归类到“动态类型语言”或者“解释型语言”里，比如 Python, Javascript, Ruby 等等；而其它的类型系统往往被归到“静态类型语言“中，比如 C/C++/Java。

=== 无念编辑 ===
无念则刚，让你心无杂念的全屏文本编辑软件2010-03-02, 发表于: it数码, 思维励志 · 标签:效率工具, 注意力, 纯文本, 软件 · 评论:0
专注，专注，集中精神。是否体验过全神贯注的时候，整个视野中只剩下眼前关注的文字，四周的声响完全被自己的思绪所笼罩，整个人就象坠入空灵的宇宙中，没有干扰、没有杂念，灵感如行云流水源源不绝。有一些软件可以帮你达到这样的境界。

=== 创意经济 ===
创意经济也称创意产业、创新经济、创意工业、创造性产业等。指那些从个人的创造力、技能和天分中获取发展动力的企业，以及那些通过对知识产权的开发可创造潜在财富和就业机会的活动。它通常包括广告、建筑艺术、艺术和古董市场、手工艺品等等。它最先由英国提出，随着社会的不断发展，它的内涵外延越来越宽泛。相关书籍、相关链接也越来越多，而且成为美学成就的品牌。
创意经济通常包括时尚设计、电影与录像、交互式互动软件、音乐、表演艺术、出版业、软件及计算机服务、电视和广播等等。此外，还包括旅游、博物馆和美术馆、遗产和体育等。

=== 众包 ===
众包指的是一个公司或机构把过去由员工执行的工作任务，以自由自愿的形式外包给非特定的（而且通常是大型的）大众网络的做法。（就是通过网络做产品的开发需求调研，以用户的真实使用感受为出发点）。众包的任务通常是由个人来承担，但如果涉及到需要多人协作完成的任务，也有可能以依靠开源的个体生产的形式出现。在美国《连线》杂志2006年的6月刊上，该杂志的记者Jeff Howe首次推出了众包的概念，不过，从提出时间看美国人提出的众包比2005年在中国诞生的威客晚了一年。

维基经济学的得名，缘于维基百科全书网站的巨大成功，它向世界证明：如果有一种方法充分利用组织里每一个人的智慧，它的能量将无比惊人。维基经济学所揭示的四个新法则——开放（Openness）、对等（Peering）、分享（Sharing）以及全球运作（Acting Globally）——正在取代一些旧的商业教条，许多成熟的传统公司正在从这种新的商务范式中受益。人们所熟知的企业如Google、亚马逊、宝洁、IBM、乐高、英特尔、宝马、波音、百思买、Youtube、MySpace等，都已经从维基经济中获得巨大的成功。

=== O2O ===
O2O即Online To Offline（在线离线/线上到线下），是指将线下的商务机会与互联网结合，让互联网成为线下交易的前台，这个概念最早来源于美国。O2O的概念非常广泛，既可涉及到线上，又可涉及到线下,可以通称为O2O。主流商业管理课程均对O2O这种新型的商业模式有所介绍及关注。2013年O2O进入高速发展阶段，开始了本地化及移动设备的整合，于是O2O商业模式横空出世，成为O2O模式的本地化分支。

=== DAO ===
DAO(Data Access Object)是一个数据访问接口，数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。
在核心J2EE模式中是这样介绍DAO模式的：为了建立一个健壮的J2EE应用，应该将所有对数据源的访问操作抽象封装在一个公共API中。用程序设计的语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口在逻辑上对应这个特定的数据存储。[1]
J2EE开发人员使用数据访问对象(DAO)设计模式把底层的数据访问逻辑和高层的商务逻辑分开.实现DAO模式能够更加专注于编写数据访问代码.
DAO基础

DAO模式是标准的J2EE设计模式之一.开发人员使用这个模式把底层的数据访问操作和上层的商务逻辑分开.一个典型的DAO实现有下列几个组件：
1. 一个DAO工厂类;
2. 一个DAO接口;
3. 一个实现DAO接口的具体类;
4. 数据传递对象(有些时候叫做值对象).
具体的DAO类包含了从特定的数据源访问数据的逻辑。
事务划分：
关于DAO要记住的一件重要事情是它们是事务性对象。每个被DAO执行的操作(对象创建，更新、或删除数据)都是和事务相关联的。同样的，事务划分(transaction demarcation)的概念是特别重要的。
{{./pasted_image.png}}

=== Docker ===
Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架或包括系统

=== LXC ===
为Linux Container的简写。Linux Container容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。相当于C++中的NameSpace。容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。与传统虚拟化技术相比，它的优势在于：
（1）与宿主机使用同一个内核，性能损耗小；
（2）不需要指令级模拟；
（3）不需要即时(Just-in-time)编译；
（4）容器可以在CPU核心的本地运行指令，不需要任何专门的解释机制；
（5）避免了准虚拟化和系统调用替换中的复杂性；
（6）轻量级隔离，在隔离的同时还提供共享机制，以实现容器与宿主机的资源共享。
总结：Linux Container是一种轻量级的虚拟化的手段。
Linux Container提供了在单一可控主机节点上支持多个相互隔离的server container同时执行的机制。Linux Container有点像chroot，提供了一个拥有自己进程和网络空间的虚拟环境，但又有别于虚拟机，因为lxc是一种操作系统层次上的资源的虚拟化。

=== PAAS ===
PaaS是Platform-as-a-Service的缩写，意思是平台即服务。[1]  把服务器平台作为一种服务提供的商业模式。通过网络进行程序提供的服务称之为SaaS(Software as a Service)，而云计算时代相应的服务器平台或者开发环境作为服务进行提供就成为了PaaS(Platform as a Service)。
所谓PaaS实际上是指将软件研发的平台（计世资讯定义为业务基础平台）作为一种服务，以SaaS的模式提交给用户。因此，PaaS也是SaaS模式的一种应用。但是，PaaS的出现可以加快SaaS的发展，尤其是加快SaaS应用的开发速度。在2007年国内外SaaS厂商先后推出自己的PAAS平台。 

==== Mercurial ====
是一种轻量级分布式版本控制系统，采用 Python 语言实现，易于学习和使用，扩展性强。其是基于 GNU General Public License (GPL) 授权的开源项目。
使用同git

==== jekyll ====
jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。

==== Disqus ====
Disqus是一家第三方社会化评论系统，主要为网站主提供评论托管服务。Disqus由Danniel Ha于2007年5月5日创办，和Dropbox、Reddit等知名网站一样，是Y Combinator孵化的一家公司。创办至今已获得Y-Combinator、Union Square Ventures、North Bridge等投资机构共计1450万美元投资。

==== Gem ====
Gem是一个管理Ruby库和程序的标准包，它通过Ruby Gem（如 http://rubygems.org/ ）源来查找、安装、升级和卸载软件包，非常的便捷。

==== GitHub Pages ====
免费的静态站点，三个特点：免费托管、自带主题、支持自制页面和Jekyll。

==== YAML ====
YAML是“另一种标记语言”的外语缩写[1] （见前方参考资料原文内容）；但为了强调这种语言以数据做为中心，而不是以置标语言为重点，而用返璞词重新命名。它是一种直观的能够被电脑识别的数据序列化格式，是一个可读性高并且容易被人类阅读，容易和脚本语言交互，用来表达资料序列的编程语言。

==== pip ====
The PyPA recommended tool for installing Python packages.

==== PyPA ====
PyPa stands for Python Parser. 
The main goal of PyPa is to allow the creation of dynamic web sites by completely separating content from logic. 
Template syntax is very simple and all logic is handled by Python code. 
It can be used stand-alone for your cgi-scripts (be it through cgi, fastcgi, scgi, pcgi, wsgi) or as your templating system within web frameworks like Django, Pylons or Turbogears. 

==== easy_install ====
easy_install是由PEAK(Python Enterprise Application Kit)开发的setuptools包里带的一个命令，所以使用easy_install实际上是在调用setuptools来完成安装模块的工作。 Perl 用户比较熟悉 CPAN，而 Ruby 用户则比较熟悉 Gems；引导 setuptools 的ez_setup工具和随之而生的扩展后的easy_install 与 “Cheeseshop”（Python Package Index，也称为 “PyPI”）一起工作来实现相同的功能。它可以很方便的让您自动下载，编译，安装和管理Python包。[1] 

==== Scala ====
一门多范式的编程语言，设计初衷是要整合面向对象编程和函数式编程的各种特性。
发音为/ˈskɑːlə
ˈskeɪlə/

=== Spark：一个高效的分布式计算系统 ===

=== glob模式 ===
所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc]匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。

==== CORS ====
Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts, JavaScript, etc.) on a web page to be requested from another domain outside the domain from which the resource originated.

==== ajax ====
AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。
AJAX = 异步 JavaScript和XML（标准通用标记语言的子集）。
AJAX 是一种用于创建快速动态网页的技术。
通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。

==== jsonp ====
JSONP(JSON with Padding)是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。由于同源策略，一般来说位于 server1.example.com 的网页无法与不是 server1.example.com的服务器沟通，而 HTML 的<script> 元素是一个例外。利用 <script> 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析

==== npm ====
是什么: javascript 的 包管理命令行工具(依赖管理,Node.js应用下载)
怎么用: 在包含package.json的目录下执行npm link会给当前的js添加可执行权限并添加它的连接到path目录里从而可以可以直接执行命令
为什么: 方便用户,通过配置,来管理依赖,提供一些应用的元信息,如版本,官网,等等

=== Benchmark Testing ===
是什么:  基准测试, 
为什么: 评估某个对象的性能
怎么做:
Benchmark testing is the process of load testing a component or an entire end to end IT system to determine the performance characteristics of the application. The benchmark test is repeatable in that the performance measurements captured will vary only a few percent each time the test is run. This enables single changes to be made to the application or infrastructure in an attempt to determine if there is a performance improvement or degradation.

Benchmark testing can combine aspects of security testing.- An example in case is benchmark testing  firewalls. This requires system and or user loads combined with security violations concurrently executed against the component to determine its performance benchmark.

The goals of benchmark testing typically fall into two categories;

To test the system to measure how a change affects its performance characteristics.

To test and tune the system to reach a performance requirement or service level agreement  (SLA). In this case a series of benchmark tests are conducted in conjunction with iterative cycles of performance tuning.

==== CSV（逗号分隔值文件格式） ====
逗号分隔值（Comma-Separated Values，CSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个字符序列，不含必须像二进制数字那样被解读的数据。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由字段组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或制表符。通常，所有记录都有完全相同的字段序列。
CSV文件格式的通用标准并不存在，但是在RFC 4180中有基础性的描述。使用的字符编码同样没有被指定，但是7-bitASCII是最基本的通用编码。

=== 协程 ===
没有啥复杂的东西，考虑清楚需求，就可以很自然的衍生出这些解决方案。
一开始大家想要同一时间执行那么三五个程序，大家能一块跑一跑。特别是UI什么的，别一上计算量比较大的玩意就跟死机一样。于是就有了并发，从程序员的角度可以看成是多个独立的逻辑流。内部可以是多cpu并行，也可以是单cpu时间分片，能快速的切换逻辑流，看起来像是大家一块跑的就行。

但是一块跑就有问题了。我计算到一半，刚把多次方程解到最后一步，你突然插进来，我的中间状态咋办，我用来储存的内存被你覆盖了咋办？所以跑在一个cpu里面的并发都需要处理上下文切换的问题。进程就是这样抽象出来个一个概念，搭配虚拟内存、进程表之类的东西，用来管理独立的程序运行、切换。

后来一电脑上有了好几个cpu，好咧，大家都别闲着，一人跑一进程。就是所谓的并行。

因为程序的使用涉及大量的计算机资源配置，把这活随意的交给用户程序，非常容易让整个系统分分钟被搞跪。所以核心的操作需要陷入内核(kernel)，切换到操作系统，让老大帮你来做。

有的时候碰着I/O访问，阻塞了后面所有的计算。空着也是空着，老大就直接把CPU切换到其他进程，让人家先用着。当然除了I\O阻塞，还有时钟阻塞等等。一开始大家都这样弄，后来发现不成，太慢了。为啥呀，一切换进程得反复进入内核，置换掉一大堆状态。进程数一高，大部分系统资源就被进程切换给吃掉了。后来搞出线程的概念，大致意思就是，这个地方阻塞了，但我还有其他地方的逻辑流可以计算，这些逻辑流是共享一个地址空间的，不用特别麻烦的切换页表、刷新TLB，只要把寄存器刷新一遍就行，能比切换进程开销少点。

行，故事讲到这里，我们来看看并发的好处：
该干嘛干嘛，多逻辑流先天符合人类描述问题的习惯；
对于I/O密集的应用，被I/O阻塞的时候能切换到计算中去，可以显著的提升程序的响应速度。
我们看到阻塞、切换到其他进程（线程）的操作，都会交由操作系统来完成。所以不管是进程还是线程，每次阻塞、切换都需要陷入系统调用(system call)，先让CPU跑操作系统的调度程序，然后再由调度程序决定该跑哪一个进程(线程)。

如果我们不要这些功能了，我自己在进程里面写一个逻辑流调度的东西，碰着i\o我就用非阻塞式的。那么我们即可以利用到并发优势，又可以避免反复系统调用，还有进程切换造成的开销，分分钟给你上几千个逻辑流不费力。这就是协程。

本质上协程就是用户空间下的线程。

=== Git： ===
Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。

=== Repo: ===
Repo是谷歌用Python脚本写的调用git的一个脚本。主要是用来下载、管理Android项目的软件仓库（也就是说Repo是用来管理给Git管理的一个个仓库的）

=== Reflection: ===
反射, 是计算机程序在运行时查看和修改自己的结构体和行为的能力.
使用:
Reflection can be used for observing and modifying program execution at runtime. A reflection-oriented program component can monitor the execution of an enclosure of code and can modify itself according to a desired goal related to that enclosure. This is typically accomplished by dynamically assigning program code at runtime.
In object oriented programming languages such as Java, reflection allows inspection of classes, interfaces, fields and methods at runtime without knowing the names of the interfaces, fields, methods at compile time. It also allows instantiation of new objects and invocation of methods.
Reflection can also be used to adapt a given program to different situations dynamically. For example, consider an application that uses two different classes X and Y interchangeably to perform similar operations. Without reflection-oriented programming, the application might be hard-coded to call method names of class X and class Y. However, using the reflection-oriented programming paradigm, the application could be designed and written to utilize reflection in order to invoke methods in classes X and Y without hard-coding method names. Reflection-oriented programming almost always requires additional knowledge, framework, relational mapping, and object relevance in order to take advantage of more generic code execution. Hard-coding can be avoided to the extent that reflection-oriented programming is used.
Reflection is often used as part of software testing, such as for the runtime creation/instantiation of mock objects.
Reflection is also a key strategy for metaprogramming.
In some object-oriented programming languages, such as C# and Java, reflection can be used to override member accessibility rules. For example, reflection makes it possible to change the value of a field marked "private" in a third-party library's class.
实现:
A language supporting reflection provides a number of features available at runtime that would otherwise be difficult to accomplish in a lower-level language. Some of these features are the abilities to:
	Discover and modify source code constructions (such as code blocks, classes, methods, protocols, etc.) as a first-class object at runtime.
	Convert a string matching the symbolic name of a class or function into a reference to or invocation of that class or function.
	Evaluate a string as if it were a source code statement at runtime.
	Create a new interpreter for the language's bytecode to give a new meaning or purpose for a programming construct.

=== 元编程 metaprogramming ===
元编程是一种计算机编程过程,特点是把计算机程序作为它的数据.这意味着程序被设计去读,生成,分析或者转换其他程序,甚至在运行时动态修改自己.使用元编程,有时候可以使用最少的代码来表达一个解决方案;有时候它让应用具有很大的灵活性去处理新的情况而不用重新编译
元编程使用的语言叫做元语言, 被操作的语言叫做对象语言, 一个语言是自己的元语言的能力叫做__反射__. 
元编程以三种方式运作:
	1. 以api的形式暴露运行时引擎的内部给编程语言
	2. 动态的执行表达式,	通常是字符串
	3. 第三种是完全脱离某种语言, 通用目的的编程转换系统如编译器.
First-class citizen
在变成语言中, First-class citizen是一个实体, 它和其他实体一样, 支持各种操作. 这些操作包括作为函数参数传递,返回.付给一个变量

=== first class object ===
In short, it means there are no restrictions on the object's use. It's the same as any other object.

A first class object is an entity that can be dynamically created, destroyed, passed to a function, returned as a value, and have all the rights as other variables in the programming language have.

Depending on the language, this can imply:

being expressible as an anonymous literal value
being storable in variables
being storable in data structures
having an intrinsic identity (independent of any given name)
being comparable for equality with other entities
being passable as a parameter to a procedure/function
being returnable as the result of a procedure/function
being constructible at runtime
being printable
being readable
being transmissible among distributed processes
being storable outside running processes
Source.

In C++ functions themselves are not first class objects, however:

You can override the '()' operator making it possible to have an object function, which is first class.
Function pointers are first class.
boost bind, lambda and function do offer first class functions
In C++, classes are not first class objects but instances of those classes are. In Python both the classes and the objects are first class objects. (See this answer for more details about classes as objects).

Here is an example of Javascript first class functions:

// f: function that takes a number and returns a number
// deltaX: small positive number
// returns a function that is an approximate derivative of f
function makeDerivative( f, deltaX )
{
	var deriv = function(x)
	{ 
	   return ( f(x + deltaX) - f(x) )/ deltaX;
	}
	return deriv;
}
var cos = makeDerivative( Math.sin, 0.000001);
// cos(0)     ~> 1
// cos(pi/2)  ~> 0
Source.

Entities that are not first class objects are referred to as second-class objects. Functions in C++ are second class because they can't be dynamically created.

Regarding the edit:

EDIT. When one says "everything is an object" (like in Python), does he indeed mean that "everything is first-class"?
The term object can be used loosely and doesn't imply being first class. And it would probably make more sense to call the whole concept 'first class entities'. But in Python they do aim to make everything first class. I believe the intent of the person who made your statement meant first class.

=== PO ===
属于L10n方案。“po”是: portable Object(可跨平台对象)的缩写。po与mo模式的转变过程PO是 Portable Object (可移植对象)的缩写形式；MO是 Machine Object (机器对象) 的缩写形式。
PO 文件是面向翻译人员的、提取于源代码的一种资源文件。当软件升级的时候，通过使用 gettext 软件包处理 PO 文件，可以在一定程度上使翻译成果得以继承，减轻翻译人员的负担。MO 文件是面向计算机的、由 PO 文件通过 gettext 软件包编译而成的二进制文件。程序通过读取 MO 文件使自身的界面转换成用户使用的语言。
GNUgettext 是一个软件包，是为了使软件实现国际化支持而产生的。
I18N是 internationalization 的缩写形式，意即在 i 和 n 之间有 18 个字母，本意是指软件的“国际化”.
L10N是 localization 的缩写形式，意即在 l 和 n 之间有 10 个字母，本意是指软件的“本地化”。
按照软件开发的惯例，最初的软件只有英文版本，根据需要，作者再把软件界面和文档翻译成不同国家、地区的语言版本。但是由于实现翻译的途径、翻译的工作效率、翻译的可重用性等因素各不相同，使翻译工作面临很大困境，也阻碍了软件的推广和应用。为了方便地将软件翻译成不同语言的版本，就需要一套翻译规范和通用工具，这就导致了“国际化”机制的出现。仅仅翻译是不够的，同一种语言在不同国家、地区可能存在多个支系，它们在表达习惯、语法结构甚至文字种类和编码上都有不同，方言更是千奇百怪，通用的翻译其质量肯定是不高的。涉及到计算机领域，还存在操作习惯上的差别，而且对某种语言提供完美的输入、显示、打印、保存、传输并非一件轻而易举的事，这就导致了“本地化”机制的出现。简而言之，“国际化”是“本地化”的一部分，主要是指国际化的实现机制和翻译工作， “本地化”包含“国际化”，是对“国际化”的补充和完善，它还包括为实现对某种特定语言良好的支持而进行的有针对性的翻译调整以及对软件进行的打补丁工作。
I18N 和 L10N 的国际组织是 Openi18n 组织，其前身是 li18nux 组织。它原来是制定GNU/Linux 自由操作系统上软件全球化标准的国际计划，后来扩充到GNU/Linux 之外所有开放源代码的技术领域，因而更名为 Open Internationalization Initiative，由非营利组织 Free Standards Group 赞助，并为世界各大厂商所支持，对于GNU/Linux 系统上的多国语言文字处理技术和环境有决定性的影响。各个开源软件开发组织通常都有负责“国际化”和“本地化”工作的分支机构。ajax
I18N 主要使用 gettext 软件包使软件实现国际化支持。
