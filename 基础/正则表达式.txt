Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-09-10T12:27:29+08:00

====== 正则表达式 ======
Created 星期六 10 九月 2016

=== 正则表达式规则 ===
1. 普通字符　"c"  -> "abcd"  匹配成功　　　"cd" -> "abcde" 匹配成功
2. 简单的转义字符　\n \r \\ \^ \$ \.
3. 能够与多种字符匹配的表达式
	a. \d 匹配　一个数字　０～９
	b. \w 匹配　一个字母或数字或下划线　
	c. \s 匹配　一个空格或制表符，换页符等空白符号
	d. . 匹配　出换行符以外的任意一个字符
4. 自定义匹配多种字符的
	a. [ab] 匹配　一个a 或　b
	b. [^ab] 匹配　出a 和　b 之外的任意一个字符
	c. [a-d] 匹配　一个a b c d
	d. [^a-d1-3] 匹配　除a-d 和　1-3之外的任意一个字符
5. 修改匹配次数的特殊符号
	a. {n} 表示前面的表达式重复ｎ次
	b. {m,n} 表示前面的表达式至少重复m次，最多重复n次　{m,} {,n}
	c. ? 表示前面的表达式匹配０或1次 等价于　{0,1}
	d. + 表示前面的表达式至少出现一次　等价于　{1,}
	e. * 表示前面的表达式可以出现任意次　等价于　{0,}
6. 其他一些代表抽象意义的符号
	a. ^ 表示字符串开始的地方　不匹配任何字符
	b. $ 表示字符串结束的地方　不匹配任何字符
	c. \b 表示一个单词的边界，也就是单词和非单词之间的位置　不表示任何字符
	d. ｜　表达式之间的或关系，匹配左边的或者右边的
	e. () 小括号会把它内部的表达式作为一个组，匹配成功后可以单独取到匹配内部的字符串，匹配次数的符号可以修饰()内的整个表达式
7. 正则表达式中的高级规则
	a. 匹配次数中的贪婪，非贪婪
	b. 反向引用，（）所包含的表达式可以被后面的串引用　　如('|")(.*?)(\1) 会匹配"abc" , 'abc' \1反向引用第一个括号的表达式匹配的__字符__，　所以前后的引号相同
	c. 预搜索，不匹配，反向预搜索，不匹配
		1. 预搜索　
			a. (?=xxx) 匹配一个缝隙，这个缝隙右边匹配表达式　如　(\w)((?=\1\1\1)(\1)) 匹配　ffffff的前四个 dddddddd的前六个
			b. (?=!xxx) 匹配一个缝隙，这个缝隙右边不能匹配表达式
		2. 反向预搜索
			a. (?<=xxxx) 匹配一个缝隙，这个缝隙左边必须匹配表达式
			b. (?<=!xxxx) 匹配一个缝隙，这个缝隙左边必须不匹配该表达式
8. 其他通用规则
	a. 表达式中可以用\xXX 和\uXXX表示一个字符
		1. \xXX 表示０～２５５之间的字符
		2. \uXXXX 可以表示任意字符
	b. 在表达式 "\s"，"\d"，"\w"，"\b" 表示特殊意义的同时，对应的大写字母表示相反的意义
	c. 那些特殊的字符需要转义　\( \? \.
	d. ()内的子表达式，如果希望不记录可以使用(?:xxxxx)表示，此时引用也会忽略该括号
	e. 常用表达式属性设置：ignorecase, singleline, multiline, global
		1. singleline 默认情况小数点匹配除换行符外的所有字符，配置后匹配所有字符
		2. multiline 默认情况^和$分别匹配①和④，设置后^匹配①和③，$匹配②和④
			a. ①xxxxxxxxxxxxxxxx②\n
			b. ③xxxxxxxxxxxxxxxx④
		3. global 主要是替换时起作用，设置后替换所有匹配


















1. 小括号（）
	a. 小括号用于分组，分组的正则表达式在匹配后，python返回的结果会包括分组，第一个元素是总的匹配串，接下来都是小括号内匹配的串
	b. ()? 表示有没有又一次或一次都没有，在python中，如果匹配的字符串内匹配了该组，就会有有一个元素是匹配该组的子串，否则元素为None
	c. 分组的要义在于：匹配'(hello)' 和　'hello' 就可以直接取到hello, 意思是匹配的字符串跟需要的字符串不同时需要分组
