Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-11-25T22:39:22+08:00

====== make ======
Created Monday 25 November 2013

==== 基础 ====
.PHONY: target   声明 target并不会真正产生这么个文件

==== 流程控制 ====
1)__if__ 
ifeq （a，b）   没空格的就不加，如（ a，b )就不相等，注意呀!!括号内部紧临值
else
endif
2)__foreach__
  1 list:=a b c
  2 p:=
  3 a:
  4     $(foreach m,$(list), $(eval p += $m))                                                                                                                                                                
  5     echo $p
说不清楚，自己体会 如果不用eval 三次p += $m会被翻译在一行里，从而语法错误


==== Function ====
revoke a function
	a=$(func args)     eg.$(shell ls -l)
define a function 
	  __define__   funcname
		  $(func ...)
	  __endef__
[[+call|call]] fucntion  

__shell cmd__     		eg.$(shell ls -l)      		revoke   shell cmd   and __return__ the contents of __stdout __
__wildcard  regs__     	$(wildcard *.log)		match the files in current dir
$(__findstring__ log, heolog) 					find the substring,if find,return it,otherwise return ""
$(__filter__ %llo, hello world)
$(filter user userdebug eng,$(MAKECMDGOALS))
$(filter-out h%, hello world )
$(words hello world )  					count the number of words
$(space)									echo a apace
$(subst hello,world,helloworld) 			substitute hello with world in (helloworld)
__$(eval p+=a) $(eval p+=b) echo $p  		reference ---->foreach__
$(sort c b a)---->a b c
$(dir <file>)  get the dir of the file

=== Makefile中include、-include、sinclude的区别 ===
 

如果指示符“__include__”指定的文件不是以斜线开始（绝对路径，如/usr/src/Makefile...），而且当前目录下也不存在此文件；make将根据文件名试图在以下几个目录下查找：首先，查找使用命令行选项“-I”或者“--include-dir”指定的目录，如果找到指定的文件，则使用这个文件；否则继续依此搜索以下几个目录（如果其存在）：“/usr/gnu/include”、“/usr/local/include”和“/usr/include”。
当在这些目录下都没有找到“include”指定的文件时，make将会提示一个包含文件未找到的告警提示，但是不会立刻退出。而是继续处理Makefile的后续内容。当完成读取整个Makefile后，make将试图使用规则来创建通过指示符“include”指定的但未找到的文件，当不能创建它时（没有创建这个文件的规则），make将提示致命错误并退出。会输出类似如下错误提示：
Makefile:错误的行数：未找到文件名：提示信息（No such file or directory）
Make： *** No rule to make target ‘<filename>’. Stop
通常我们在Makefile中可使用“__-include__”来代替“include”，来__忽略由于包含文件不存在或者无法创建时的错误提示__（“-”的意思是告诉make，忽略此操作的错误。make继续执行）。像下边那样：
-include FILENAMES...
使用这种方式时，当所要包含的文件不存在时不会有错误提示、make也不会退出；除此之外，和第一种方式效果相同。以下是这两种方式的比较：
使用“include FILENAMES...”，make程序处理时，如果“FILENAMES”列表中的任何一个文件不能正常读取而且不存在一个创建此文件的规则时make程序将会提示错误并退出。
使用“-include FILENAMES...”的情况是，当所包含的文件不存在或者不存在一个规则去创建它，make程序会继续执行，只有真正由于不能正确完成终极目标的重建时（某些必需的目标无法在当前已读取的makefile文件内容中找到正确的重建规则），才会提示致命错误并退出。
__为了和其它的make程序进行兼容。也可以使用“sinclude”来代替“-include”__（GNU所支持的方式）。
