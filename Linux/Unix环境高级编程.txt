Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-01-04T16:46:11+08:00

====== Unix环境高级编程 ======
Created Saturday 04 January 2014

{{./pasted_image.png}}

{{./pasted_image001.png}}
{{./pasted_image002.png}}

{{./pasted_image015.png}}

==== uid and euid   setuid ====
进程有uid和euid，uid是标识运行此进程的是谁，euid则用来控制文件访问
比如passwd，它设置了setuid位并且它的uid是root，所以运行时可以有root的访问权限，所以是当设置了setuid位时，运行时就会把进程的euid设置为文件的uid，否则uid和euid都是正在运行它的user

{{./pasted_image004.png}}
{{./pasted_image005.png}}

=== Figure 6.8. Relationship of the various time functions ===

{{./pasted_image006.png}}
{{./pasted_image007.png}}

==== Figure 6.9. Conversion specifiers for strftime ====
{{./pasted_image008.png}}
{{./pasted_image009.png}}
{{./pasted_image010.png}}
{{./pasted_image011.png}}
{{./pasted_image012.png}}
With Linux on an Intel x86 processor, the text segment starts at location 0x08048000, and the bottom of the stack starts just
below 0xC0000000. (The stack grows from higher-numbered addresses to lower-numbered addresses
on this particular architecture.) The unused virtual address space between the top of the heap and
the top of the stack is large.

		Figure 7.7. Environment variables defined in the Single UNIX
		Specification

{{./pasted_image013.png}}

{{./pasted_image014.png}}
{{./pasted_image016.png}}
{{./pasted_image017.png}}
{{./pasted_image018.png}}
1.When a __filename__ argument is specified
	1)If filename contains a __slash__, it is taken as a __pathname__.
	2)__Otherwise__, the executable file is searched for in the directories specified by the __PATH__ environment variable.

2.The next difference concerns the passing of the argument list (l stands for list and v stands for
vector)
	1)The functions execl, execlp, and execle require each of the command-line arguments to the
	new program to be specified as separate arguments				
			__We mark the end of the arguments with a null pointer. 	If this null pointer is specified by the constant 0, we must explicitly cast it to a pointer; if we don't, it's__
			__interpreted as an integer argument. If the size of an integer is different from the size of a char *, the__
			__actual arguments to the exec function will be wrong.__

	2)For the other three functions (execv, execvp, and execve), we have to build an array of
	pointers to the arguments, and the address of this array is the argument to these three functions.
	
3.The final difference is the passing of the environment list to the new program. 
	1)The two functions whose names end in an e (execle and execve) allow us to pass a pointer to an array of pointers to
	the environment strings.
	2)The other four functions, however, use the environ variable in the calling
	process to copy the existing environment for the new program.
	
4.PATH=/bin:/usr/bin:/usr/local/bin/:.
specifies __four__ directories to search. The __last__ path prefix specifies the __current__ directory. (A __zero-length__
prefix __also__ __means__ the __current__ directory. It can be specified as __a colon at the beginning__ of the value,
__two colons in a row__, or__ a colon at the end of the value__.)

5__.If either execlp or execvp finds an executable file using one of the path prefixes, but the file isn't a__
__machine executable that was generated by the link editor, the function assumes that the file is a shell__
__script and tries to invoke /bin/sh with the filename as input to the shell.------------>__

====== ? ======
 

=== only shell know the #!/bin/python ===

6.Every system has a __limit__ on the __total size of the argument list__ and __the environment list.__ From Section
2.5.2 and Figure 2.8, this limit is given by ARG_MAX.
	We sometimes encounter this limit when using the shell's __filename expansion __feature to generate a list of filenames
	for example, the command:
		grep getrlimit [[/usr/share/man/*/*]]
	To get around the limitation in argument list size, we can use the xargs(1) command to break up long argument lists. 

		find /usr/share/man -type f -print | xargs grep getrlimit
		{{./pasted_image019.png}}
		
		{{./pasted_image020.png}}
		{{./pasted_image021.png}}
		{{./pasted_image022.png}}


===== Figure 14.8. The FreeBSD data structures for record locking =====


	{{./pasted_image023.png}}
	process has a process table. process table has many file descriptors which point to the file table item.file table entry has v-node pointer which point to v-node table entry.v-node table entry has i-node info and locks.
	
	
	{{./pasted_image024.png}}
	{{./pasted_image025.png}}
	Figure 14.15. Type of STREAMS message generated for
	write, putmsg, and putpmsg

	{{./pasted_image026.png}}
	{{./pasted_image027.png}}
