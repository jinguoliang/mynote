Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-11-03T11:17:24+08:00

====== MultiMedia ======
Created Sunday 03 November 2013

audio
播放音乐
mPlayer = new MediaPlayer();
mPlayer.setDataSource(this, url);
mPlayer.prepare();
mPlayer.setLooping(true);
mPlayer.start();
mPlayer.stop();
mPlayer.release();
获取默认的闹铃音乐Uri
Uri url = RingtoneManager.getActualDefaultRingtoneUri(this, RingtoneManager.TYPE_ALARM);
音量键控制
Android maintains a separate audio stream for playing music, alarms, notifications, the incoming call ringer, system sounds, in-call volume, and DTMF tones. 
By default, pressing the volume controls modify the volume of the active audio stream. If your app isn't currently playing anything, hitting the volume keys adjusts the ringer volume.
setVolumeControlStream(AudioManager.STREAM_MUSIC);从调用这个函数开始，无论目标activity是否显示，音量键控制为所设置的audio stream
用播放键控制
注册一个broadcast receiver来监听播放键
<receiver android:name=".RemoteControlReceiver">
	<intent-filter>
		<action android:name="android.intent.action.MEDIA_BUTTON" />
	</intent-filter>
</receiver>

public class RemoteControlReceiver extends BroadcastReceiver {
	@Override
	public void onReceive(Context context, Intent intent) {
		if (Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {
			KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
			if (KeyEvent.KEYCODE_MEDIA_PLAY == event.getKeyCode()) {
				// Handle key press.
			}
		}
	}
}
媒体剑可能会被多个应用监听，所以需要限定他们的监听的时间，android 提供了注册和解除注册媒体监听器来实现排斥其他监听，就是说当注册后指能本应用能监听到，其他应用不行
AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);
...

// Start listening for button presses
am.registerMediaButtonEventReceiver(RemoteControlReceiver);
...

// Stop listening for button presses
am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);

audio 焦点
请求永久焦点
AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);
...

// Request audio focus for playback
int result = am.requestAudioFocus(afChangeListener,
								 // Use the music stream.
								 AudioManager.STREAM_MUSIC,
								 // Request permanent focus.
								 AudioManager.AUDIOFOCUS_GAIN);
   
if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {
	am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);
	// Start playback.
}

取消焦点
// Abandon audio focus when playback complete    
am.abandonAudioFocus(afChangeListener);

请求暂时焦点，允许其他audio减低音量，仍然播放
// Request audio focus for playback
int result = am.requestAudioFocus(afChangeListener,
							 // Use the music stream.
							 AudioManager.STREAM_MUSIC,
							 // Request permanent focus.
							 AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);
   
if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {
	// Start playback.
}

监听器，处理audio 事件改变
OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener() {
	public void onAudioFocusChange(int focusChange) {
		if (focusChange == AUDIOFOCUS_LOSS_TRANSIENT
			// Pause playback
		} else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {
			// Resume playback 
		} else if (focusChange == AudioManager.AUDIOFOCUS_LOSS) {
			am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);
			am.abandonAudioFocus(afChangeListener);
			// Stop playback
		}
	}
};
Duck!!
OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener() {
	public void onAudioFocusChange(int focusChange) {
		if (focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {
			// Lower the volume
		} else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {
			// Raise it back to normal
		}
	}
};

检测支持的音频输出硬件
if (isBluetoothA2dpOn()) {
	// Adjust output for Bluetooth.
} else if (isSpeakerphoneOn()) {
	// Adjust output for Speakerphone.
} else if (isWiredHeadsetOn()) {
	// Adjust output for headsets
} else { 
	// If audio plays and noone can hear it, is it still playing?
}

处理音频输出硬件改变的事件
private class NoisyAudioStreamReceiver extends BroadcastReceiver {
	@Override
	public void onReceive(Context context, Intent intent) {
		if (AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction())) {
			// Pause the playback
		}
	}
}

private IntentFilter intentFilter = new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY);

private void startPlayback() {
	registerReceiver(myNoisyAudioStreamReceiver(), intentFilter);
}

private void stopPlayback() {
	unregisterReceiver(myNoisyAudioStreamReceiver);
}

相机-----------记录生活，分享生活--------定时提示照相--------给照片添加一些信息来说明照相的地点
声明特性，可以被Android市场检测到，以防不支持该特性的机器下载
 <uses-feature android:name="android.hardware.camera" />
也可以在代码检测 
PackageManager 的hasSystemFeature(PackageManager.FEATURE_CAMERA)
用其他相机软件照相
private void dispatchTakePictureIntent(int actionCode) {
	Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
	startActivityForResult(takePictureIntent, actionCode);
}

检测是否有相应的应用处理Intent
public static boolean isIntentAvailable(Context context, String action) {
	final PackageManager packageManager = context.getPackageManager();
	final Intent intent = new Intent(action);
	List<ResolveInfo> list =
			packageManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);
	return list.size() > 0;
}
处理相机程序返回结果
private void handleSmallCameraPhoto(Intent intent) {
	Bundle extras = intent.getExtras();
	mImageBitmap = (Bitmap) extras.get("data");
	mImageView.setImageBitmap(mImageBitmap);
}
声明相机应用保存图片的路径
File f = createImageFile();
takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(f));

如何获取一个图片路径呢
private File createImageFile() throws IOException {
	// Create an image file name
	String timeStamp = 
		new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
	String imageFileName = JPEG_FILE_PREFIX + timeStamp + "_";
	File image = File.createTempFile(
		imageFileName, 
		JPEG_FILE_SUFFIX, 
		getAlbumDir()
	);
	mCurrentPhotoPath = image.getAbsolutePath();
	return image;
}
添加图片到系统图片库
private void galleryAddPic() {
	Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
	File f = new File(mCurrentPhotoPath);
	Uri contentUri = Uri.fromFile(f);
	mediaScanIntent.setData(contentUri);
	this.sendBroadcast(mediaScanIntent);
}

原图片可能太大太耗内存，可以加载缩放的图片
private void setPic() {
	// Get the dimensions of the View
	int targetW = mImageView.getWidth();
	int targetH = mImageView.getHeight();
  
	// Get the dimensions of the bitmap
	BitmapFactory.Options bmOptions = new BitmapFactory.Options();
	bmOptions.inJustDecodeBounds = true;		//声明指编码宽高
	BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);
	int photoW = bmOptions.outWidth;
	int photoH = bmOptions.outHeight;
  
	// Determine how much to scale down the image
	int scaleFactor = Math.min(photoW/targetW, photoH/targetH);
  
	// Decode the image file into a Bitmap sized to fill the View
	bmOptions.inJustDecodeBounds = false;
	bmOptions.inSampleSize = scaleFactor;
	bmOptions.inPurgeable = true;
  
	Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);
	mImageView.setImageBitmap(bitmap);
}
录制简单的视频
依然需要feature 
<uses-feature android:name="android.hardware.camera" />
用其他应用帮你录制视频
 private void dispatchTakeVideoIntent() {
	Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
	startActivityForResult(takeVideoIntent, ACTION_TAKE_VIDEO);
}
依然需要检测是否有使用的应用，上边有
查看录制的视频
private void handleCameraVideo(Intent intent) {
	mVideoUri = intent.getData();
	mVideoView.setVideoURI(mVideoUri);
}//这也太简单了，过了
控制相机

获取Camera对象
打开相机也是挺耗时的可以放到单独线程里
private boolean safeCameraOpen(int id) {
	boolean qOpened = false;
  
	try {
		releaseCameraAndPreview();
		mCamera = Camera.open(id);
		qOpened = (mCamera != null);
	} catch (Exception e) {
		Log.e(getString(R.string.app_name), "failed to open Camera");
		e.printStackTrace();
	}

	return qOpened;    
}

private void releaseCameraAndPreview() {
	mPreview.setCamera(null);
	if (mCamera != null) {
		mCamera.release();
		mCamera = null;
	}
}

Preview 类
class Preview extends ViewGroup implements SurfaceHolder.Callback {

	SurfaceView mSurfaceView;
	SurfaceHolder mHolder;

	Preview(Context context) {
		super(context);

		mSurfaceView = new SurfaceView(context);
		addView(mSurfaceView);

		// Install a SurfaceHolder.Callback so we get notified when the
		// underlying surface is created and destroyed.
		mHolder = mSurfaceView.getHolder();
		mHolder.addCallback(this);
		mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
	}
...
}

设置并启动预览
public void setCamera(Camera camera) {
	if (mCamera == camera) { return; }
    
	stopPreviewAndFreeCamera();
    
	mCamera = camera;
    
	if (mCamera != null) {
		List<Size> localSizes = mCamera.getParameters().getSupportedPreviewSizes();
		mSupportedPreviewSizes = localSizes;
		requestLayout();
      
		try {
			mCamera.setPreviewDisplay(mHolder);
		} catch (IOException e) {
			e.printStackTrace();
		}
      
		/*
		  Important: Call startPreview() to start updating the preview surface. Preview must 
		  be started before you can take a picture.
		  */
		mCamera.startPreview();
	}
}
设置预览大小参数
public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
	// Now that the size is known, set up the camera parameters and begin
	// the preview.
	Camera.Parameters parameters = mCamera.getParameters();
	parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);
	requestLayout();
	mCamera.setParameters(parameters);

	/*
	  Important: Call startPreview() to start updating the preview surface. Preview must be
	  started before you can take a picture.
	*/
	mCamera.startPreview();
}
预览方向
Most camera applications lock the display into landscape mode because that is the natural orientation of the camera sensor.
setCameraDisplayOrientation() 

Take a Picture

Use the Camera.takePicture() method to take a picture once the preview is started. You can create Camera.PictureCallback and Camera.ShutterCallback objects and pass them into Camera.takePicture().

If you want to grab images continously, you can create a Camera.PreviewCallback that implements onPreviewFrame(). For something in between, you can capture only selected preview frames, or set up a delayed action to call takePicture().
相机的释放
public void surfaceDestroyed(SurfaceHolder holder) {
	// Surface will be destroyed when we return, so stop the preview.
	if (mCamera != null) {
		/*
		  Call stopPreview() to stop updating the preview surface.
		*/
		mCamera.stopPreview();
	}
}

/**
* When this function returns, mCamera will be null.
  */
private void stopPreviewAndFreeCamera() {

	if (mCamera != null) {
		/*
		  Call stopPreview() to stop updating the preview surface.
		*/
		mCamera.stopPreview();
    
		/*
		  Important: Call release() to release the camera for use by other applications. 
		  Applications should release the camera immediately in onPause() (and re-open() it in
		  onResume()).
		*/
		mCamera.release();
    
		mCamera = null;
	}
}
