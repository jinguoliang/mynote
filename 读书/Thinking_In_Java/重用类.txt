Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-10-18T15:16:14+08:00

====== 重用类 ======
Created 星期二 18 十月 2016

=== 组合语法 ===
1. 在一个对象里包含另一个对象
2. 初始化属性
	a. 在对象定义的地方
	b. 在构造函数里
	c. 懒惰初始化，在使用的时候
	d. 实例初始化  实例的块， 与静态块相对，在实例初始化是调用

=== 继承语法 ===
1. 继承是 JAVA 的构成部分，也是所有面向对象语言的一部分。因为在创建一个类时你总是使用继承，要么显式继承某个类，要么隐式继承 Object
2. 子类自动获得父类的方法属性
3. 当执行某个类是 java AClass 会调用它的 main 方法，即使这个类是包访问
4. 覆盖是指子类重写了父类的方法，此时如果想调父类的方法，需要使用 super
5. 子类可以添加任意的新方法
6. 初始化基类（父类）
	a. 创建一个子类对象时，它里面会包一个父类对象
	b. 父类的初始化在子类构造函数里隐式调用 super（）
	c. 含参构造函数， 就需要显示调用了，此时必须在子类构造函数的第一条语句


=== 委托 ===
1. 第三种关系是委托，它是继承和组合的中间路，因为你将一个成员对象放到一个类里（组合），但同事暴露它所有的方法给新类（继承）


=== 结合组合和继承 ===
1. 这很经常
2. 确保正确的清理工作
	a. java 不像 c++ 有析构器，java 自动回收，但是依然可能需要一些释放资源的工作，这就需要自己定义方法了并且有客户端保证执行
	b. 使用 finally 确保执行释放资源的操作
	c. 注意清理的顺序，学习 C++的编译器， 先按逆序清理子类，然后在清理父类
	d. 大部分情况清理不是问题，让垃圾回收做就可以了，但是你不能依赖他，靠不住，finalize（）可能用于不执行

=== 选择组合还是选择继承 ===
1. 组合和继承都是将子对象放入新类，组合是显式的，继承是隐式的。
2. 组合是在你想要已存在类的功能但不 需要它的接口时用。新类用户只看到新类的接口但看不到嵌入类的接口，所以一般都设置 private
3. is-a 的关系是继承
4. has-a 的关系是组合

=== protected ===
1. 只允许子类的方法访问的父类属性方法用 protected 修饰, 也允许包访问

=== 向上转型 ===
1. 继承最重要的不是它将父类的方法提供给子类，而是形成了 is-a 的关系
2. 把子类当父类用的过程就是向上转型
3. why 向上转型
	a. 这个向上，是根据继承图来的
	b. 也有向下转型
4. 组合 vs 继承
	a. 这里又有一个选择的标准，问问自己，是否需要向上转型

=== final 关键字 ===
1. 标识这不能改变， 两个原因： 设计原因，效率原因
2. final 的数据
	a. 声明数据不会改变， 有两个好处：
		1. 编译时就可以确定值，减轻运行时负担，在 java 里，必须是基本类型，定义时初始化
		2. 运行时初始化，不再改变， 在java 里，对象引用，但只是限制这个引用指向其他引用，对象本身是可以改变的
	b. final 和 static final 的区别： 在于是否是 static ，在于运行时，static 只执行一次
3. 空（blank） final
	a. 指的是用 final 修饰属性，但没有初始化
	b. 此时编译器会保证你必须在构造函数里初始化，否则编译出错
	c. 具有更大的灵活性
4. final 参数 方法内，不能改变该参数
5. final 方法 两个原因，一个废弃了
	a. 阻止子类重写该方法，主要是设计上的目的
	b. inline，c++里有，早起的 java 实现需要，现在完全交给 jvm 优化就是了
6. final 和 private
	a. private的方法同时隐含也是 final 的
	b. 子类可以创建相同的方法，但是并不覆盖父类方法，因为父类的私有方法对子类是不可见的
7. final 类
	a. 整个类都无法被继承，不能被修改
	b. 它的属性隐含是 final 的
8. final 注意事项
	a. 使用 final 可以对方法精确控制，一些方法你认为别人不应该重写，但是你认为的有时候不对
	b. ArrayList 代替 Vector      HashMap 代替 Hashtable

=== 初始化和类加载 ===
1. java 中每个类是一个单独的文件，所以可以在第一次使用该类时加载该类
2. 有继承的初始化过程

=== 总结 ===
1. 继承和组合都是使用旧类型产生新类型。组合使用存在的类型作为自己一部分完成底层实现，继承则重用了接口。
2. 继承中，子类拥有父类的接口，所以可以向上转型，这在多态中非常重要
3. 尽管面向对象编程强调的是继承，但在设计是优先考虑组合，在真正必要的时候使用继承。组合更灵活， 而且可以在运行时改变被组合对象的行为
4. 当设计一个系统时，你的目的是寻找一些类，他们都有各自特定的功能，既不太大也不太小，如果设计太复杂时，分解一些大的类是有帮助的。
5. 当你开始设计一个系统时，意识到编程开发是一个渐进的过程，就像人类学习一样是很重要的。这依赖试验，你可以做尽可能多的分析，但是当你开始项目时，依然不知道所有答案。如果你去把你的项目当做有机的进化的生物来培养，而不是构建一个一次性的玻璃盒摩天大楼，你会的到更多的成功和立即的反馈。而继承和组合正式帮助你做实验的基础工具。
