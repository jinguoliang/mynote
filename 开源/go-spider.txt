Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-05-25T10:53:05+08:00

====== go-spider ======
Created Monday 25 May 2015

github.com/hu17889/go_spider/core/spider

├── core 核心
│   ├── common 
│   │   ├── com_interfaces
│   │   │   └── com_interfaces.go
│   │   ├── config
│   │   │   └── config.go
│   │   ├── etc_config
│   │   │   └── etc_config.go
│   │   ├── mlog
│   │   │   ├── filelog.go
│   │   │   ├── mlog.go
│   │   │   └── strace.go
│   │   ├── page
│   │   │   └── page.go
│   │   ├── page_items
│   │   │   └── page_items.go
│   │   ├── request
│   │   │   └── request.go
│   │   ├── resource_manage
│   │   │   ├── resource_manage_chan.go
│   │   │   ├── resource_manage.go
│   │   │   └── resource_manage_test.go
│   │   └── util
│   │       └── util.go
│   ├── downloader   下载器  request ——> downloader ——> page
│   │   ├── downloader.go
│   │   ├── downloader_http.go
│   │   └── downloader_test.go
│   ├── page_processer  定义了一个接口Process，结构处理
│   │   └── page_processer.go
│   ├── pipeline  管道，定义了一个接口将pageitem和task传入
│   │   ├── collect_pipeline_page_items.go
│   │   ├── pipeline_console.go
│   │   ├── pipeline_file.go
│   │   └── pipeline.go
│   ├── scheduler  调度器，简单的定义了一个接口有加入和取出，还有计数
│   │   ├── scheduler.go
│   │   ├── scheduler_queue.go
│   │   ├── scheduler_simple.go
│   │   └── scheduler_test.go
│   └── spider
│       └── spider.go
├── example  示例
│   ├── baidu_baike_page_processor
│   │   └── main.go
│   ├── github_repo_page_processor
│   │   └── main.go
│   ├── login_profile_page_processor
│   │   └── main.go
│   ├── sina_stock_json_processor
│   │   └── main.go
│   ├── sohu_gossip_page_json_processor
│   │   └── main.go
│   └── weixin_sogou_cookie_processor
│       ├── main.go
│       └── weixin.sogou.com.json
├── extension   扩展
│   ├── downloader
│   │   └── contribution_downloader_extension_here
│   ├── other
│   │   └── contribution_other_tool_here
│   ├── pipeline
│   │   └── contribution_pipeline_extension_here
│   └── scheduler
│       └── contribution_scheduler_extension_here
├── LICENSE
└── README.md


从一个例子开始吧!
找了个最简单,看起来好像最简单:) github_repo_page_processor
在main就一行代码,不过这一行够长的.
就是调用了spider.NewSpider()创建了一个spider然后对他配置并运行它,这配置的过程应该叫构建者模式,链式编程
   spider.NewSpider(NewMyPageProcesser(), "TaskName").
		AddUrl("https://github.com/hu17889?tab=repositories", "html"). // Start url, html is the responce type ("html" or "json" or "jsonp" or "text")
		AddPipeline(pipeline.NewPipelineConsole()).                    // Print result on screen
		SetThreadnum(3).                                               // Crawl request by three Coroutines
		Run()
详细点儿:它创建一个Spider,然后设置要抓取的url,添加一个管道用于输出结果,设置线程数,最后运行.
下面我们看看Spider的构建:
NewSpider:
	开启log
	配置spider: 设置我们传进去的pageProcesser,设置默认的scheduler,设置downloader,设置空的pipeline
再来看我们传进去的PageProcesser 
page_processer.PageProcesser 定义了一个__Process__(p *page.Page)
而我们的Processer实现了它,而这里就是我们要对页面的处理
然后是AddUrl(), 它会创建一个请求request.NewRequest添加到spider  这里的工作应该也比较多后面详解
让我们看AddPipeline()
这里添加一个Pipeline,而他要求一个Process()方法,Process(items *page_items.PageItems, t com_interfaces.Task)
我们穿了一个默认的PipelineConsole,它输出到控制台
最后的run()实现也是比较复杂,后面详解
----
run()里做了什么呢? 它从schedule里拿出一个请求准备提交,然后从ResourceManageChan里使用一个chan来运行goruntine
如何取得请求? 通过poll.
请求如何来的? 我们调用AddUrl()时,它会构造一个请求并执行AddRequest(),从而pScheduler.Push()
关键是如何使用这个ResourceManageChan的?
根据chan的特性,设置它的cap=1,则getOne() 会 ch <- 1, 如果能传进去,会继续执行就会分配一个goroutine
如果已经满了,会阻塞.
在goroutine里,会调用freeOne(),它只是 _ <- ch,从管道取出一个值,从而有空间继续往里写入

---
然后是goroutine里this.pageProcess(req),处理一个请求:
1. 设置错误处理
2. 请求url, 这里应注意:
	a. 先休息,不然太占用cpu了,现在也挺占用的. 可以根据sleeptype休息固定的时间或者随机数的时间
	b. 尝试请求三次,如果成功就终止尝试
	c. 调用downloader下载
3. 调用pageProcesser处理返回结果page
4. 对添加到page里的TargetRequest取出添加到spider里
5. 根据page里GetSkip()确定是否要忽略输出,如果不忽略,对每个pipeline输出

1. scheduler
2. resourceManager
3. openning source:PageProcesser
4. downloader
5. pipline
6. page
7. reques
8. pageItem
