Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-09-04T19:24:24+08:00

====== learn stepbystep ======
Created 星期日 04 九月 2016

===== 介绍 =====

python如此简单, 它让你__关注问题__而不是__语法和结构__
特色: 简单,易学,自由开源,高层语言,可移植,解释性
		面向对象,可扩展(可以调用其他语言的库),可嵌入(可嵌入到其他语言作解释器)
		丰富的库(标准库:正则, 文档生成,单元测试,线程,数据库,网页浏览器,CGI,FTP,电子邮件,XML,XML-RPC
					HTML, WAV, 密码系统,GUI,Tk)


==== 安装Python ====

会有什么好说的吗?

==== 先体验一下 ====

我早已经体验无数次了

==== 基本概念 ====

1. 字面意思上的常量  (python没有非字面意思的常量)
	a. 数 四种: 整数, 长整数, 浮点数(2.3E4==2.3*10的4次方), 复数(形如a+bj)
	b. 字符串
		a. 单引号(') 同 双引号(") 
			1. 单行字符串 'hello', "world"
			2. 里面的字符需要转义(\'), 单引号里的单引号,双引号里的双引号
			3. 不过行尾的\表示下一行不是新行,而是本行的延续
		b. 三引号(''')(""") 多行字符串 不需要转义 里面允许有单引号和双引号
		c. 自然字符串(r或者R开头) 字符串里的\会被转义,但是有些情况是不需要的比如window上的路径"c:\t\readbook.txt",此时需要r"c:\t\readbook.txt"
		d. Unicode编码的文本 (u或者U)
		e. 字符串是不可变的, 是说的存字符串的那块区域不可变
		f. 'hello'"world"这样放在一起会自动连接
2. 变量 给一个 字面意思的常量一个存储位置,内容会改变
3. 标识符 变量是一个标识符, 取名规则:
	a. 第一个字母必须是字母表中的字母或者下划线(_)
	b. 其他部分可以由字母,下划线,数字组成
	c. 大小写敏感
4. 数据类型 抽象数据类型adt
5. 对象
	a. python怎么突然就是所有东西都是对象了?!!!
6. 逻辑行和物理行
	a. 物理行是编辑器中看到一行
	b. 逻辑行是编译器看到的, 以(;)结尾
	c. 一般, 推荐一个逻辑行对应一个物理行, 但是这样是可以的: i=5;print i
7. 行首空格 python对缩进敏感, 同一缩进的语句为一个语句块

==== 运算符 ====
	1. + - * **(2 ** 3 == 2 * 2 * 2) / // (取整除, 返回商的整数部分) %(取模)
	2. << (把一个数的比特向左移动) >>  & | ^(按位异或) ~(按位翻转)
	3. < > <= >= == != not and or
	4. 优先级  从来不考虑, 括号括号括号    计算顺序   结合规律(从左向右 or 从右向左)

==== 控制流 ====

分支语句
1. if cond: else     if cond: elif cond: else:
循环语句
1. while　cond: else:  多了个else: 不过不加也可以
2. for e in es: else:  
3. break 遇到break就不会执行else了这么说，else还是有意义的．
4. continue

==== 函数 ====
1. 定义　def methodName():
2. 实参和形参
3. 局部变量
	a. python定义变量就是直接赋值，即定义和初始化同时
	b. 局部变量是在从定义到所在块结束
	c. 有全局变量，即在函数外定义，在函数内写时，因为ａ的原因，会定义局部变量，当然读是没问题的
	d. 为了解决写的问题，需要在用之前使用global x的形式声明，然后使用
4. 默认参数
	a. def hello(msg, times=1): 提供默认参数，在调用的时候可以省略其传参
	b. 只能在尾部，这也好理解，省略的是尾部的，省略中间的无法说明
5. 特定参数
	a. 指定键值对传参
	b. hello(msg="hello", times=2)
	c. 不必担心顺序问题
	d. 有默认值的都可以忽略传参
6. return
7. docstring 函数定义内的第一个逻辑行单独写一个字符串，不是定义变量
	a. 使用fun.__doc__引用它
	b. 使用help(fun)查看格式化更好
	c. pydoc

==== 模块 ====
1. 导入模块　import mod 
2. .pyc 编译成的字节码文件，包含了输入模块的处理，所以再次使用时会快一些
3. 导入模块元素　from mod import method|data  这样可以直接使用了否则需要通过mod.method引用
4. __name__ 为模块的名字　通过跟__main__比较判断是否是由用户单独运行
5. dir()
	a. 用来列出某个模块定义的所有表示符
	b. 无参表示列出当前模块的标识符
	c. del 用来删除一个变量
	d. 不仅是模块也可以列出函数内的定义的标识符.........

==== Python中的数据结构 ====
1. python中有三种内建数据结构：列表，元组，字典
2. 列表　[1, 'a', 23] 可变
3. 元组　(1, 'a', 23) 不可变　空元组（）一个元素的元组（１,)因为要区分算数式中的（１）最长用在字符串中print("%s is %d" % ("john", 26))
4. 字典
	a. {1:'a',2:'b'}
	b. 键必须是唯一的，并且一般为简单对象，不能为可变对象
	c. items() 遍历键值对元组（ｋ,v)
	d. in　判断是否存在
5. 序列
	a. 列表，元组，字符串都是序列
	b. 序列支持索引
		1. 竟然可以用负数，负数倒着索引，－１表示最后一个
	c. 序列支持切片
		1. fruit[1:3] 前闭后开的区间，也可以用负数
		2. 返回copy
6. 都是对象，　都是引用
7. string也是对象

==== 来个栗子 ====

==== 面向对象编程 ====
1. 类封装了数据和方法
2. 类里的变量叫域，类里的函数叫方法，域和方法合称类的属性
3. self
	a. 域和方法只有一个区别，它的第一个参数必须是self, 并且调用是不需要管，Python会管
	b. self不是强制的,但是应该强制：）
4. 类 class Person:      p=Person() 
5. 对象的方法　p.sayHi()
6. __init__ 对象的构造器：）
7. __del__ 类似java对象的finalize()
8. 包,类和方法都有__doc__
9. 类的所有数据数据成员除了以双下划线(__)开头的都是公开的
10. 惯例单下划线(_)开头的为私有
11. 类的域和对象的域对比，类似java中的static和非static, 对象的域必须使用self.feild=5这样定义使用
12. 继承　跟java也很像
	a. class Teacher(Person):
	b. 构造　__init__里要显式调用父类的，Person.__init__(self), 调用父类的属性都要显式调用
	c. 支持多态

==== 存储 ====
1. 文件的输入输出
2. 对象的持久化
	a. pickle.dump(obj, file)
	b. pickle.load(file)
	c. file 一定是以ｂ方式的开的，因为要把对象以二进制写入独处

==== 异常 ====
1. try: except Err: except: else
2. 触发异常　raise Except()
3. 还可以给１加一个finally:

==== 标准库 ====
1. sys 包含解释器相关的方法类
2. os 系统的api

==== 更多Python内容 ====
1. 特殊的方法
	a. 用来模仿某个行为，如：如果想实现x[key]这样的操作, 那么需要实现__getitem__()
	b. 更准确的说，对于某些行为，python需要在语法上支持，而实际调用的还是对象的方法，所以需要一个转化，python采用这种约定的形式实现转化
	c. del() 某个对象时会调用它的__del__()
	d. 使用＜号时，调用__lt__() 
	e. ...
2. 列表综合，我的理解就是个map [2 * i for i in [2, 3, 4, 5] if i % 2 == 0]
3. *args 作为参数和**maps作为参数来实现可变参数，无限参数，分别用于接受不带key和带key的参数，在函数内接受到的分别是元组和map
4. 牛叉叉的lambda 实现一个匿名函数，并可以赋值，返回等等　return lambda s: s *2
5. exec 可以在运行时执行一个字符串中的python语句　exec("print('hello')")  eval() 同，就是有返回值了：）
6. assert　断言
7. repr()  会返回一个对象规范的字符串代表它，很多类型的返回的字符串可以通过eval()来的到原来的对象




