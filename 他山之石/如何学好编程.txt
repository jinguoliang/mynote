Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-04-25T23:25:42+08:00

====== 如何学好编程 ======
Created 星期五 25 四月 2014

学习C语言的一些方法建议
2011-05-03
有人认为，现在是java和.net的时代，有谁还需要C以及汇编呢？孰不知，java和.net是建立在软件之上的，是为了垄断市场而建立起来的体系，犹如挖好一个金壁辉煌的坑，请你往下跳，还自以为站在巨人的肩膀上，事实上成了坑底之蛙。要成为一个真正的程序员，并期望成为一个程序员高手，必须从机器出发，从cpu到操作系统，再到软件体系，高手的境界就是悟道后的明镜灵台，软件设计出神入化，我就是程序，程序就是我。
旁观者李四说：此人大笨也！我用鼠标随便拖几个控件，就是一个xxx管理系统了，你用C语言怕是一年也写不出来吧！好吧，我要承认，讲这话的都已经是mS的奴才了，别的我不了解，MFC本身就是一个封闭的架构，从MFC入手学习，你只会形成一种封闭的思维模式，因为MS希望很多人只学会表面的东西，不致成为高手，所以它大力推荐所谓的可视化的程序开发工具，也真有很多人愿意上他的当，最后真正迷失方向。说他坐不了程序吧，他也可以作，但是如果程序复杂一点，出现问题时，问题出再哪里就搞不清楚了，反正是不清楚！
梁肇新，大牛啊，他说："我就搞不懂了，用鼠标怎么写程序呢？在我的公司里，高手的键盘响个不停，鼠标偶尔响一下，新手是鼠标响个不停，键盘偶尔响一下，他们的薪水相差的就不是一倍那么多了！"
C语言是各大操作系统的基础，Unix、Linux、Windows其内核都清一色是C语言开发的，(某些地方是和汇编语言混合开发的)，君不见WindowsAPI都是C语言函数的接口？Unix/Linux绝大多数应用都是C语言开发的；Windows应用程序用纯API开发已然不多，大多都是依靠某种ApplicationFramework，比如所谓的VC++，其实就是指VCIDE+C++语言+MFC(现在重点已转向ATL、WTL)，但是Windows服务、网络、驱动程序等底层软件，还是C语言开发的。各种语言的编译器，包括java虚拟机，都是用C语言开发的。各种嵌入式设备，如手机、PDA也都是C语言开发的。
第一个要装进行囊和你一起前进是"规范的格式" 。所以说，规范的格式是入门的基础。那这个规范的格式包括什么呢？不少啊，要坚持才能做到！长标志符命名，代码缩进，一对大括号范围不超过一屏幕，等等。
第二个要装进行囊的是耐心，所谓工欲善其事，必先利其器。要想成功，没有一个相对平淡的过程是不可能的。这不仅仅指你在学习过程中要有耐心，要循序渐进，而起也说的是另一个重要的方面：调式程序。调试是写程序过程中一个重要的方面，如果有人能一次写成程序，牛啊，而且是大牛，不光是大牛，还是老子骑的那头青牛，凡人是做不道的！调试是每个程序必定经历的历程。
第一招，学什么呢？打狗棍法！呵呵
有一个伟人说过："重复权威是成熟的必经之路"，这是站在巨人的肩膀上的做法，习武之人首先要学的都是各种套路，比方说辟邪剑法，然后才能融会贯通，开宗流派；我们学习写程序也要这样来，这是一个捷径，帮你走得更远得捷径。
看书，看好书！书中所写，是前人数十年经验所写，看十本书，就相当于汲取了前人数十年的功力，那么你的内功也会迅速上升1甲子。：）书当然要看好书，只有好书才营养丰富。要做到读书破万卷，编程如有神；枯燥的看书是很郁闷的，很容易变成化石！现在很多是书都是用源码说明问题的，源码就像是动画、就像是幻灯片，把书中的招式一一演练给你看。 自己手工输入这一步不能省略，现在很多书有配套源码，很多同学或者成年人学习的时候都耍小聪明，直接把源码复制过去编译运行，hoho,这是没有效果的。
TC至少有一个好处，可以锻炼我们使用组合键的习惯，可以锻炼我们使用键盘编程的习惯。
一、要读就读好书，否则不如不读
Kernighan和Ritchie的《TheCProgrammingLanguage》（中译名《C程序设计语言》）堪称经典中的经典，不过旧版的很多内容都已过时，和现在的标准C语言相去甚远，大家一定要看最新的版本，否则不如不看。另外，即使是最经典最权威的书，也没有办法面面俱到，所以手边常备一本《C语言参考手册》是十分必要的。《C语言参考手册》就是《CReferenceManual》，是C语言标准的详细描述，包括绝大多数C标准库函数的细节，算得上是最好的标准C语言的工具书。顺便提一句，最新的《C程序设计语言》是根据C89标准修订的，而《C语言参考手册》描述的是C99标准，二者可能会有些出入，建议按照C99标准学习。还有一本《C和指针》，写得也是相当地不错，英文名是《PointersonC》，特别地强调指针的重要性，算是本书的一个特点吧。不过这本书并不十分适合初学者，如果你曾经学过C语言，有那么一些C语言的基础但又不是很扎实，那么你可以尝试一下这本书。我相信，只要你理解了指针，C语言便不再神秘。
如果你已经啃完了一本C语言教材，想要更进一步，那么有两本书你一定要看。首先是《CTrapsandPitfalls》（中译名《C陷井与缺陷》），很薄的一本小册子，内容非常非常地有趣。要注意一点，这本书是二十多年前写成的，里面提到的很多C语言的缺陷都已被改进，不过能够了解一些历史也不是什么坏事。然后你可以挑战一下《ExpertCProgramming》（中译名《C专家编程》），书如其名，这本书颇具难度，一旦你仔细读完并能透彻理解，你便可以放心大胆地在简历上写"精通C语言"了。
切记一个原则，不要读自己目前还看不懂的书，那是浪费生命。如果你看不懂，那你一定是缺失了某些必需基础知识。此时，你要仔细分析自己需要补充哪些内容，然后再去书店寻找讲述的这些内容的书籍。把基础知识补充完毕再回头来学习，才会真正的事半功倍。
二、Unix/Linux还是Windows，这是个很大的问题
不同的编程环境会造就出不同思维的程序员。Windows的程序员大多依赖集成开发环境，比如VisualStudio，而Unix程序员更加钟爱Makefile与控制台。显而易见，集成开发环境更容易上手，在Windows上学习C语言，只需要会按几个基本的VisutalC++工具栏按钮就可以开始写Hello,World!了，而在Unix下，你需要一些控制台操作的基本知识。有人也许认为Unix的环境更简洁，但习惯的力量是很大的 。
所以我建议初学者应该以VisualC++6.0（不是VisualC++.NET）或者DevC++作为主要的学习环境，而且千万不要在IDE的使用技巧上过多纠缠，因为今后你一定要转向Unix环境的。VisualC++6.0使用很方便，调试也很直观，但其默认的编译器对C标准的支持并不好，而DevC++使用gcc编译器，对C99的标准都支持良好。使用顺带提一下，很多大学的C语言课程还在使用TurboC2.0作为实验环境，这是相当不可取的，原因其一是TC2.0对C标准几乎没有支持，其二是TC2.0编译得到的程序是16位的，这对今后理解32位的程序会造成极大的困扰（当然,用djgpp之类的东西可以使TC2.0编译出32位程序，不过那过于复杂了）。
等你学完一本C语言的教材，你一定要转向Unix平台继续学习，几乎所有的C语言高级教程都是基于Unix平台的（比如《C专家编程》）。转变的过程是痛苦的，你需要面对的是各种纷繁复杂的命令，完全不同于Windows平台的思考方式，但是这种痛苦是值得的。Unix与C是共生的，Unix的思考方式和习惯更加符合C语言的思考方式和习惯。在Unix下，你可以找到无数优秀的源代码供你尽情阅读，你可以方便地查看某个库函数的联机手册，还可以看到最优秀的代码风格（说到代码风格，我会专门写一篇文章详细叙述）。
归结起来就是一句话：初学C语言，建议使用Windows系统和集成开发环境，在准备向"高手"方向努力时，请先转向Unix平台。
三、万事俱备，你就是东风
书已选定，环境配置完成，正所谓万事俱备，只欠你自己的努力了。请从书的前言开始，仔细地阅读手头的教材，很多人看书喜欢直接从第一章开始看，这是错误的做法。前言是作者对整本书的大体介绍，作者一般会告诉你需要什么基础才能够顺利阅读本书，这可以帮助你检验自己的基础知识是否已经具备。看完前言，还要浏览一下目录，了解一下书的整体结构，顺便给自己安排一下学习计划。
例子之后就是习题了，我建议初学者把所有的习题都独立做一遍。
也许你认为这样学习太慢，其实不然。学得细致就不用走回头路，等你学到后面才发现自己前面没搞清楚，那才是真的得不偿失。一般说来，整本书读完，你应该完成数千行乃至上万行的代码，无论是原封不动照抄书上的，还是自己心血来潮写就的，都是今后继续学习的一笔财富。以我自己举例，阅读《Windows核心编程》时（我只阅读了3/4的内容），除了抄书上的代码，还自己写了很多例子，一共有5574行（用unix下的wc工具统计），时隔多日，我早已记不清Windows的系统编程了，但只要花几分钟翻出以前的代码看看，便会重新了然于胸。所谓好记性不如烂笔头，就是这个道理。
仔细读书、认真抄写源代码、独立完成习题外加更进一步的实验，最后将所有的代码留下，成为自己的经验和财富，绝对的辛苦，也绝对的事半功倍。当然，这种方式只适合学习需要精通的技术，如果不是学习C语言，你还要具体情况具体分析。
写到最后，还有非常非常重要的一点没有提及──代码风格，从最开始学习就必须强迫自己模仿最优秀的代码风格。因为代码风格太重要内容也太多，我会用专门的一篇文章来详细讨论，请大家关注《程序员之路──关于代码风格》。
在这里停一下，上面说的便是我学习的风格：总要经历一番波折，瞎折腾几下，然后才会有偶然间的明悟－开窍了！我甚至没见过几个人有我这么笨，现在明白过来了，我总是一开始把事情想得过于复杂，造成狗咬刺猬的难堪的局面，然而竟然有意想不到的收获！但是不建议大家模仿这种风格，起码追女朋友的时候不能这样，生活中很多机会在于接手的那一瞬间，失去就永远找不回来了。
现在回来，后来偶然间，我看懂了一行代码，是print语句，当时兴奋得要命，又仔细看了这个看了那个，一下子看懂了很多东西，像是在霎那间被什么给击中似的，立刻间醍醐灌顶。。。。
可是，还是那句话不破不立，不阻不行。就像我现在有了电脑，整天泡在互联网的海洋里，感受着快餐文化，好久都没静下心来好好想点东西了。
谈及C语言，我想凡是学过它的朋友都有这样一种感觉，那就是"让我欢喜让我忧。"欢喜的是，C语言功能非常强大、应用广泛，一旦掌握了后，你就可以理直气壮地对他人说"我是电脑高手！"，而且以后若是再自学其他语言就显得轻而易举了。忧虑的是，C语言犹如"少林武功"一般博大精深，太难学了。其实就笔者认为C语言并非是"difficult（困难）"的，只要你能理清思路，掌握它的精髓，那么自学C语言是一件非常容易且又其乐无穷的事。今天本人就与大家一起谈谈如何学习C语言或者说学习C语言应从哪几方面着手。
就个人感触，无论学习哪门语言首先应该了解一下自己所学语言的背景，也可以说它的发展史。C语言属于高级程序语言的一种，它的前身是"ALGOL"。其创始人是布朗·W·卡尼汉和丹尼斯·M·利奇。C语言问世时是带有很大的局限性，因为它只能用于UNIX系统上。然而随着科学技术的进步，计算机工业的发展，C语言逐渐脱离UNIX。1987年美国标准化协会制定了C语言的国际标准，简称"ANSIC"，从此以后它便成为一种广泛使用的程序语言。C语言的优点很多，主要的有如下四点：
1. 兼备高级语言与低级语言的优点，属于一种中间语言。
2. 它是一种结构化程序设计语言，非常适合结构化程序设计。
3. 有较丰富的数据类型、运算符以及函数供以选用。
4. 直接与内存打交道，使修改、编辑其他程序与文档变得轻松，简单。
怎样才能学好c语言？想尽快上手就得掌握计算机的特点，计算机的特点包括：
1. 计算机在问题的处理方式上要求全，将所有的可能都要告诉它。
2. 计算机要求程序的描述精确，无二义性。
3. 计算机编程是要求有很强的全局性和逻辑性，不存在起伏的问题。
计算机要求它的主人，考虑问题要全面，所有可能的情况及处理都要告诉它，要求学会沉稳，心态要稳定，要求交流的语句一定要明了含义单一。
怎样才能很快的学会c语言，更快的度过磨合期呢？C语言的语法规则记忆理解当然是不可少的，除此之外还应注意以下几个方面：
1. 平衡心态，虽然不能做到"不以物喜，不以己悲"的水平，但至少不要浮躁，不要急于求成，欲速则不达。
2. 培养自身的全局意识，既能小无内，也能大无外，才行。
3. 严格按照程序设计过程设计程序，不要跳脱，天马行空，没有规矩是不成方圆的。
4. 努力提高自身的综合素质。程序是人思维的表达形式，是人处理问题思路和语言的结合体。你对客观看成到什么程度和你掌握的知识成正比。如果你对处理的问题不理解，不会处理，你怎么也写不出程序。
5. 学会交流，多交流，相互补益，同时团队合作也是很重要的。
